{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gabriela-c/mystuff/movie-marathon-app/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/gabriela-c/mystuff/movie-marathon-app/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/gabriela-c/mystuff/movie-marathon-app/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/gabriela-c/mystuff/movie-marathon-app/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gabriela-c/mystuff/movie-marathon-app/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gabriela-c/mystuff/movie-marathon-app/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gabriela-c/mystuff/movie-marathon-app/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gabriela-c/mystuff/movie-marathon-app/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gabriela-c/mystuff/movie-marathon-app/client/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport AddMarathonBar from './components/AddMarathonBar';\nimport MarathonList from './components/MarathonList';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.inputElement = React.createRef();\n\n    _this.handleInput = function (e) {\n      var marathonName = e.target.value;\n      var currentMarathon = {\n        marathon: marathonName,\n        key: Date.now()\n      };\n\n      _this.setState({\n        currentMarathon: currentMarathon\n      });\n    };\n\n    _this.addMarathon = function (e) {\n      e.preventDefault();\n      var marathonToAdd = _this.state.currentMarathon;\n\n      var marathonList = _toConsumableArray(_this.state.marathons).concat([marathonToAdd]);\n\n      _this.setState({\n        marathons: marathonList,\n        currentMarathon: {\n          marathon: '',\n          key: ''\n        }\n      });\n    };\n\n    _this.deleteMarathon = function (key) {\n      var marathonsList = _this.state.marathons;\n      var filteredList = marathonsList.filter(function (marathon) {\n        return marathon.key !== key;\n      });\n\n      _this.setState({\n        marathons: filteredList\n      });\n    };\n\n    _this.callBackendAPI =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/express_backend');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              return _context.abrupt(\"return\", body);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.state = {\n      marathons: [],\n      currentMarathon: {\n        marathon: '',\n        key: ''\n      },\n      data: null\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // Call our fetch function below once the component mounts\n      this.callBackendAPI().then(function (res) {\n        return _this2.setState({\n          data: res.express\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    } // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(AddMarathonBar, {\n        currentMarathon: this.state.currentMarathon,\n        addMarathon: this.addMarathon,\n        handleInput: this.handleInput,\n        inputElement: this.inputElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, this.state.data), React.createElement(MarathonList, {\n        marathons: this.state.marathons,\n        deleteMarathon: this.deleteMarathon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/gabriela-c/mystuff/movie-marathon-app/client/src/App.js"],"names":["React","Component","AddMarathonBar","MarathonList","App","props","inputElement","createRef","handleInput","e","marathonName","target","value","currentMarathon","marathon","key","Date","now","setState","addMarathon","preventDefault","marathonToAdd","state","marathonList","marathons","deleteMarathon","marathonsList","filteredList","filter","callBackendAPI","fetch","response","json","body","status","Error","message","data","then","res","express","catch","err","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport AddMarathonBar from './components/AddMarathonBar'\nimport MarathonList from './components/MarathonList'\n\nclass App extends Component {\n\n  inputElement = React.createRef()\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      marathons: [],\n      currentMarathon: { marathon: '', key: ''},\n      data: null\n    };\n  }\n\n  handleInput = (e) => {\n    const marathonName = e.target.value;\n    const currentMarathon = { marathon: marathonName, key: Date.now() }\n\n    this.setState({\n      currentMarathon\n    });\n  }\n\n  addMarathon = (e) => {\n    e.preventDefault();\n\n    const marathonToAdd = this.state.currentMarathon\n    const marathonList = [...this.state.marathons, marathonToAdd]\n\n    this.setState({\n      marathons: marathonList,\n      currentMarathon: { marathon: '', key: '' }\n    });\n  }\n\n  deleteMarathon = (key) => {\n\n    const marathonsList = this.state.marathons\n    const filteredList = marathonsList.filter(marathon => {\n      return marathon.key !== key\n    });\n\n    this.setState({\n      marathons: filteredList\n    });\n  }\n\n  componentDidMount() {\n      // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n    }\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n    callBackendAPI = async () => {\n    const response = await fetch('/express_backend');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n    return body;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <AddMarathonBar\n            currentMarathon={this.state.currentMarathon}\n            addMarathon={this.addMarathon}\n            handleInput={this.handleInput}\n            inputElement={this.inputElement}\n          />\n        </header>\n        <h2>{this.state.data}</h2>\n        <MarathonList\n          marathons={this.state.marathons}\n          deleteMarathon={this.deleteMarathon}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}